# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: win-webserver
#   labels:
#     app: win-webserver
# spec:
#   ports:
#     # the port that this service should serve on
#     - port: 80
#       targetPort: 80
#   selector:
#     app: win-webserver
#   type: ClusterIP
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   labels:
#     app: win-webserver
#   name: win-webserver
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: win-webserver
#   template:
#     metadata:
#       labels:
#         app: win-webserver
#       name: win-webserver
#     spec:
#       containers:
#         - name: windowswebserver
#           image: mcr.microsoft.com/windows/servercore:ltsc2022
#           # securityContext:
#           #   windowsOptions:
#           #     gmsaCredentialSpecName: prod-docker
#           command:
#             - powershell.exe
#             - -command
#             - "<#code used from https://gist.github.com/19WAS85/5424431#> ; $$listener = New-Object System.Net.HttpListener ; $$listener.Prefixes.Add('http://*:80/') ; $$listener.Start() ; $$callerCounts = @{} ; Write-Host('Listening at http://*:80/') ; while ($$listener.IsListening) { ;$$context = $$listener.GetContext() ;$$requestUrl = $$context.Request.Url ;$$clientIP = $$context.Request.RemoteEndPoint.Address ;$$response = $$context.Response ;Write-Host '' ;Write-Host('> {0}' -f $$requestUrl) ;  ;$$count = 1 ;$$k=$$callerCounts.Get_Item($$clientIP) ;if ($$k -ne $$null) { $$count += $$k } ;$$callerCounts.Set_Item($$clientIP, $$count) ;$$ip=(Get-NetAdapter | Get-NetIpAddress); $$header='<html><body><H1>Windows Container Web Server</H1>' ;$$callerCountsString='' ;$$callerCounts.Keys | % { $$callerCountsString+='<p>IP {0} callerCount {1} ' -f $$ip[1].IPAddress,$$callerCounts.Item($$_) } ;$$footer='</body></html>' ;$$content='{0}{1}{2}' -f $$header,$$callerCountsString,$$footer ;Write-Output $$content ;$$buffer = [System.Text.Encoding]::UTF8.GetBytes($$content) ;$$response.ContentLength64 = $$buffer.Length ;$$response.OutputStream.Write($$buffer, 0, $$buffer.Length) ;$$response.Close() ;$$responseStatus = $$response.StatusCode ;Write-Host('< {0}' -f $$responseStatus)  } ; "
#           ports:
#             - containerPort: 80
#               protocol: TCP
#       nodeSelector:
#         kubernetes.io/os: windows
#         node.kubernetes.io/windows-build: 10.0.20348
#         kubernetes.io/hostname: build1.pflnet.net
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: win-webserver-2
#   labels:
#     app: win-webserver-2
# spec:
#   ports:
#     # the port that this service should serve on
#     - port: 12005
#       targetPort: 12005
#   selector:
#     app: win-webserver-2
#   type: ClusterIP
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   labels:
#     app: win-webserver-2
#   name: win-webserver-2
# spec:
#   replicas: 2
#   selector:
#     matchLabels:
#       app: win-webserver-2
#   template:
#     metadata:
#       labels:
#         app: win-webserver-2
#       name: win-webserver-2
#     spec:
#       containers:
#         - name: windowswebserver
#           image: mcr.microsoft.com/windows/servercore:ltsc2022
#           # securityContext:
#           #   windowsOptions:
#           #     gmsaCredentialSpecName: prod-docker
#           command:
#             - powershell.exe
#             - -command
#             - "<#code used from https://gist.github.com/19WAS85/5424431#> ; $$listener = New-Object System.Net.HttpListener ; $$listener.Prefixes.Add('http://*:12005/') ; $$listener.Start() ; $$callerCounts = @{} ; Write-Host('Listening at http://*:80/') ; while ($$listener.IsListening) { ;$$context = $$listener.GetContext() ;$$requestUrl = $$context.Request.Url ;$$clientIP = $$context.Request.RemoteEndPoint.Address ;$$response = $$context.Response ;Write-Host '' ;Write-Host('> {0}' -f $$requestUrl) ;  ;$$count = 1 ;$$k=$$callerCounts.Get_Item($$clientIP) ;if ($$k -ne $$null) { $$count += $$k } ;$$callerCounts.Set_Item($$clientIP, $$count) ;$$ip=(Get-NetAdapter | Get-NetIpAddress); $$header='<html><body><H1>Windows Container Web Server</H1>' ;$$callerCountsString='' ;$$callerCounts.Keys | % { $$callerCountsString+='<p>IP {0} callerCount {1} ' -f $$ip[1].IPAddress,$$callerCounts.Item($$_) } ;$$footer='</body></html>' ;$$content='{0}{1}{2}' -f $$header,$$callerCountsString,$$footer ;Write-Output $$content ;$$buffer = [System.Text.Encoding]::UTF8.GetBytes($$content) ;$$response.ContentLength64 = $$buffer.Length ;$$response.OutputStream.Write($$buffer, 0, $$buffer.Length) ;$$response.Close() ;$$responseStatus = $$response.StatusCode ;Write-Host('< {0}' -f $$responseStatus)  } ; "
#           ports:
#             - containerPort: 12005
#               protocol: TCP
#       nodeSelector:
#         kubernetes.io/os: windows
#         node.kubernetes.io/windows-build: 10.0.20348
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: win-webserver-3
#   labels:
#     app: win-webserver-3
# spec:
#   ports:
#     # the port that this service should serve on
#     - port: 12005
#       targetPort: 12005
#   selector:
#     app: win-webserver-3
#   type: ClusterIP
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   labels:
#     app: win-webserver-3
#   name: win-webserver-3
# spec:
#   replicas: 2
#   selector:
#     matchLabels:
#       app: win-webserver-3
#   template:
#     metadata:
#       labels:
#         app: win-webserver-3
#       name: win-webserver-3
#     spec:
#       containers:
#         - name: windowswebserver
#           image: mcr.microsoft.com/windows/servercore:ltsc2019
#           # securityContext:
#           #   windowsOptions:
#           #     gmsaCredentialSpecName: prod-docker
#           command:
#             - powershell.exe
#             - -command
#             - "<#code used from https://gist.github.com/19WAS85/5424431#> ; $$listener = New-Object System.Net.HttpListener ; $$listener.Prefixes.Add('http://*:12005/') ; $$listener.Start() ; $$callerCounts = @{} ; Write-Host('Listening at http://*:80/') ; while ($$listener.IsListening) { ;$$context = $$listener.GetContext() ;$$requestUrl = $$context.Request.Url ;$$clientIP = $$context.Request.RemoteEndPoint.Address ;$$response = $$context.Response ;Write-Host '' ;Write-Host('> {0}' -f $$requestUrl) ;  ;$$count = 1 ;$$k=$$callerCounts.Get_Item($$clientIP) ;if ($$k -ne $$null) { $$count += $$k } ;$$callerCounts.Set_Item($$clientIP, $$count) ;$$ip=(Get-NetAdapter | Get-NetIpAddress); $$header='<html><body><H1>Windows Container Web Server</H1>' ;$$callerCountsString='' ;$$callerCounts.Keys | % { $$callerCountsString+='<p>IP {0} callerCount {1} ' -f $$ip[1].IPAddress,$$callerCounts.Item($$_) } ;$$footer='</body></html>' ;$$content='{0}{1}{2}' -f $$header,$$callerCountsString,$$footer ;Write-Output $$content ;$$buffer = [System.Text.Encoding]::UTF8.GetBytes($$content) ;$$response.ContentLength64 = $$buffer.Length ;$$response.OutputStream.Write($$buffer, 0, $$buffer.Length) ;$$response.Close() ;$$responseStatus = $$response.StatusCode ;Write-Host('< {0}' -f $$responseStatus)  } ; "
#           ports:
#             - containerPort: 12005
#               protocol: TCP
#       nodeSelector:
#         kubernetes.io/os: windows
#         node.kubernetes.io/windows-build: 10.0.17763
---
apiVersion: v1
kind: Service
metadata:
  name: win-webserver-4
  labels:
    app: win-webserver-4
spec:
  ports:
    # the port that this service should serve on
    - port: 12005
      targetPort: 12005
  selector:
    app: win-webserver-4
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: win-webserver-4
  name: win-webserver-4
spec:
  replicas: 2
  selector:
    matchLabels:
      app: win-webserver-4
  template:
    metadata:
      labels:
        app: win-webserver-4
      name: win-webserver-4
    spec:
      containers:
        - name: windowswebserver
          image: mcr.microsoft.com/windows/servercore:ltsc2019
          # securityContext:
          #   windowsOptions:
          #     gmsaCredentialSpecName: prod-docker
          command:
            - powershell.exe
            - -command
            - "<#code used from https://gist.github.com/19WAS85/5424431#> ; $$listener = New-Object System.Net.HttpListener ; $$listener.Prefixes.Add('http://*:12005/') ; $$listener.Start() ; $$callerCounts = @{} ; Write-Host('Listening at http://*:80/') ; while ($$listener.IsListening) { ;$$context = $$listener.GetContext() ;$$requestUrl = $$context.Request.Url ;$$clientIP = $$context.Request.RemoteEndPoint.Address ;$$response = $$context.Response ;Write-Host '' ;Write-Host('> {0}' -f $$requestUrl) ;  ;$$count = 1 ;$$k=$$callerCounts.Get_Item($$clientIP) ;if ($$k -ne $$null) { $$count += $$k } ;$$callerCounts.Set_Item($$clientIP, $$count) ;$$ip=(Get-NetAdapter | Get-NetIpAddress); $$header='<html><body><H1>Windows Container Web Server</H1>' ;$$callerCountsString='' ;$$callerCounts.Keys | % { $$callerCountsString+='<p>IP {0} callerCount {1} ' -f $$ip[1].IPAddress,$$callerCounts.Item($$_) } ;$$footer='</body></html>' ;$$content='{0}{1}{2}' -f $$header,$$callerCountsString,$$footer ;Write-Output $$content ;$$buffer = [System.Text.Encoding]::UTF8.GetBytes($$content) ;$$response.ContentLength64 = $$buffer.Length ;$$response.OutputStream.Write($$buffer, 0, $$buffer.Length) ;$$response.Close() ;$$responseStatus = $$response.StatusCode ;Write-Host('< {0}' -f $$responseStatus)  } ; "
          ports:
            - containerPort: 12005
              protocol: TCP
      nodeSelector:
        kubernetes.io/os: windows
        node.kubernetes.io/windows-build: 10.0.17763
